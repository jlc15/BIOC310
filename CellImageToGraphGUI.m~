function varargout = CellImageToGraphGUI(varargin)
% CELLIMAGETOGRAPHGUI MATLAB code for CellImageToGraphGUI.fig
%      CELLIMAGETOGRAPHGUI, by itself, creates a new CELLIMAGETOGRAPHGUI or raises the existing
%      singleton*.
%
%      H = CELLIMAGETOGRAPHGUI returns the handle to a new CELLIMAGETOGRAPHGUI or the handle to
%      the existing singleton*.
%
%      CELLIMAGETOGRAPHGUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in CELLIMAGETOGRAPHGUI.M with the given input arguments.
%
%      CELLIMAGETOGRAPHGUI('Property','Value',...) creates a new CELLIMAGETOGRAPHGUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before CellImageToGraphGUI_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to CellImageToGraphGUI_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help CellImageToGraphGUI

% Last Modified by GUIDE v2.5 14-Feb-2017 16:45:28

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @CellImageToGraphGUI_OpeningFcn, ...
    'gui_OutputFcn',  @CellImageToGraphGUI_OutputFcn, ...
    'gui_LayoutFcn',  [] , ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before CellImageToGraphGUI is made visible.
function CellImageToGraphGUI_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to CellImageToGraphGUI (see VARARGIN)

% Choose default command line output for CellImageToGraphGUI
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes CellImageToGraphGUI wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = CellImageToGraphGUI_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% Executes on button press in loadMATFILEButton and constructs Pop-Up window and
% populates handles structure with .mat analysis information
function loadMATFILEButton_Callback(hObject, eventdata, handles)
% hObject    handle to loadMATFILEButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% Output - handle structure with updated information from .mat file for
% graph rendering

%TODO maybe syntax to make empty string
inputWindow.Mat_File = { {'uigetfile(''.'')'} };
%TODO: throw exception if user tries to not put in units/etc.
inputWindow.Units = '';

inputWindow = StructDlg(inputWindow, 'Input Plotting Data');
handles.matFileName = inputWindow.Mat_File;
%reg ex matching
handles.units = inputWindow.Units;
load(handles.matFileName);

%new data has colony information analysis integrated in .mat file
if exist('colonies','var')
    %maybe have different init graph calls here depends on if
    %colonies/cells provided
    handles.colonies = colonies;
elseif exist('cells', 'var')
    handles.cells = cells;
end

%possibly use isLoaded to tell user that the .mat file and the images
%don't match up
set(handles.isLoaded, 'BackgroundColor', [0, 1, 0]);
handles.loadedMAT = 1;
handles.highlightedCell = 1;
guidata(hObject,handles);
initGraph(hObject, handles);

% function getPixelOnMouseMove
% MousePos = get(mainAxis,'CurrentPoint');

%Plots the given colonies
function colonyColors = helpPlot(hObject, handles)
axes(handles.GraphAxes);
%xlim MAX
globalMaxT = -Inf;
%ylim MAX
globalMaxCytoToNuclearFluor = -Inf;
colonyColors = cell(1 : length(handles.coloniesToPlot));
for colony = 1 : length(handles.coloniesToPlot)
    %check if the current colony is going to be plotted
    if handles.coloniesToPlot(colony)
        markerColor = rand(3, 1)';
        colonyColors{colony} = markerColor;
        currentColony = handles.colonies(colony);
        totalCells = length(currentColony.cells);
        for cell = 1 : totalCells
            %get each cell
            currentCell = currentColony.cells(cell);
            cytoToNuclearFluor = currentCell.fluorData(:, 2) ./ ...
                currentCell.fluorData(:, 3);
            currentMaxT = max(currentCell.onframes);
            
            %update global xlim and ylim
            if currentMaxT > globalMaxT
                globalMaxT = currentMaxT;
            end
            
            if max(cytoToNuclearFluor) > globalMaxCytoToNuclearFluor
                globalMaxCytoToNuclearFluor = max(cytoToNuclearFluor);
            end
            plot(currentCell.onframes, cytoToNuclearFluor, '-o', 'MarkerSize', 2, ...
                'MarkerEdgeColor', markerColor, 'MarkerFaceColor', markerColor);
            hold on;
        end
    end
end

%legend('Colony 1', 'Colony 2');
xlim([0 globalMaxT]);
ylim([0 globalMaxCytoToNuclearFluor]);
xlabel(['Time ' handles.units]);
ylabel('Cytosolic to Nuclear Fluorescence Ratio');
set(gca, 'fontsize', 16);
box on;
hold off;
guidata(hObject, handles);

%Initialize graph view to visualize all colonies
function initGraph(hObject, handles)
if isfield(handles,'colonies')
    %originally set graphvis to view all colonies
    handles.coloniesToPlot = ones(1 : length(handles.colonies));
    colonyColors = helpPlot(hObject, handles);
end

if (length(handles.colonies) > 1)
    %now that you have plotted all colonies you can select specific colonies if
    %more than one colony exists
    set(handles.selectColoniesButton, 'Visible', 'on');
end
handles.colonyColors = colonyColors;
guidata(hObject,handles);
%set(gcf,'WindowButtonMotionFcn', {@getPixelOnMouseMove, handles.GraphAxes});


% --- Executes on button press in loadTIFFILE. Occurs after loading .mat
% file
function loadTIFFILE_Callback(hObject, eventdata, handles)
% hObject    handle to loadTIFFILE (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
image.Directory = { {'uigetdir(''.'')'} };
image.MicroscopePosition = 0;
image = StructDlg(image);
handles.microscopePosition = image.MicroscopePosition;
handles.imgTimept = 0;
handles.imageDirectory = image.Directory;
handles.displayNuclear = get(handles.Nuclear,'Value');
handles.displayCytosolic = get(handles.Cytosolic,'Value');
guidata(hObject, handles);
initImageViewer(hObject, handles);

%Generates the max intensity projection for each channel once and stores
function maxIntensityProjections = getMaxIntensityProjections(images, hObject, handles)
%check pc or mac
%parallelize?? <- parfor()
%cellstr(images.ordering')'

reader = bfGetReader([handles.imageDirectory, '/', images.prefix]);
%Init max intensity projection storage for all timepoints for all channels
maxIntensityProjections = cell(1, reader.getSizeT);
numberOfChannels = length(images.w);
%load one image bfGetPlane(); bfOpen()
for timept = 1 : reader.getSizeT
    %assume all channels and timepoints are the same length
    maxIntensityProjections{timept} = ...
        zeros(size(bfGetPlane(reader, 1), 1), size(bfGetPlane(reader, 1), 2), numberOfChannels);
    for channel = 1 : numberOfChannels
        %get max intensity z slice
        currentChannel = ...
            andorMaxIntensityBF(images, handles.microscopePosition, timept - 1, images.w(channel));
        maxIntensityProjections{timept}(:, :, channel) = currentChannel;
    end
end
%guidata(hObject, handles);

%Initializes Image Viewer Panel based on user input
function initImageViewer(hObject, handles)
axes(handles.ImageAxes)
images = readAndorDirectory(handles.imageDirectory);
maxIntensityProjections = getMaxIntensityProjections(images, hObject, handles);
handles.maxIntensityProjections = maxIntensityProjections;
imshow(handles.maxIntensityProjections{1}(:, :, 1), []); %get the first timepoint to display the cytosolic channel
set(handles.ImageAxes, 'Visible', 'on');
guidata(hObject, handles);

function InitScrollBar(hObject, handles)
set(handles.scrollImageSet, 'Min', 0);
set(handles.scrollImageSet, 'Max', length(handles.maxIntensityProjections) - 1);
set(handles.scrollImageSet, 'Value', 0);
set(handles.scrollImageSet, 'SliderStep', [1 / (length(handles.maxIntensityProjections) - 1) ,...
    10 / (length(handles.maxIntensityProjections) - 1) ]);
guidata(hObject, handles);


% --- Executes on slider movement.
function scrollImageSet_Callback(hObject, eventdata, handles)
% hObject    handle to scrollImageSet (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
axes(handles.ImageAxes);
imageNumberSelected = int32(get(handles.scrollImageSet, 'Value')) + 1;
if imageNumberSelected == 1 %TODO: if user goes from not 0 to zero then problem
    InitScrollBar(hObject, handles)
end
%get(handles.imadjust(img{channelIdx},...
%stretchlim(img{channelIdx}, sclimits));
imshow(handles.maxIntensityProjections{imageNumberSelected}(:, :, 2), []);  
hold on;
%plot(handles.);
%handles.CurrentImage = showImg(num2cell(handles.maxIntensityProjections{imageNumberSelected}(:, :, 2)));
handles.imgTimept = imageNumberSelected;
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function scrollImageSet_CreateFcn(hObject, eventdata, handles)
% hObject    handle to scrollImageSet (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end

% --- Executes on button press in Nuclear.
function Nuclear_Callback(hObject, eventdata, handles)
% hObject    handle to Nuclear (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%toggle state of Nuclear
handles.displayNuclear = get(hObject,'Value');
if handles.displayNuclear
    imshow(handles.maxIntensityProjections{handles.imgTimept + 1}(:, :, 1), []); 
end
% else
%     imshow(handles.maxIntensityProjections{handles.imgTimept + 1}(:, :, 2), []); 
% end
guidata(hObject, handles);


% --- Executes on button press in Cytosolic.
function Cytosolic_Callback(hObject, eventdata, handles)
% hObject    handle to Cytosolic (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.displayCytosolic = get(hObject,'Value');
if handles.displayNuclear
    imshow(handles.maxIntensityProjections{handles.imgTimept + 1}(:, :, 2), []); 
end
% else 
%     imshow(handles.maxIntensityProjections{handles.imgTimept + 1}(:, :, 1), []); 
% end
guidata(hObject, handles);



% --- Executes on button press in CellLabelling.
function CellLabelling_Callback(hObject, eventdata, handles)
% hObject    handle to CellLabelling (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
axes(handles.ImageAxes);
hold on;
 if get(handles.CellLabelling, 'Value') %add cells labels if desired
     if handles.loadedMAT 
         for colony = 1 : length(handles.colonies)
             times = cat(2, handles.colonies(colony).cells.onframes);
             coordinates = cat(1, handles.colonies(colony).cells.position);
             search = [times', coordinates];
             cellsToPlot = find(search(search(:, 1)) == handles.imgTimept + 1);
             coordToPlot = search(cellsToPlot, [2, 3]);
             scatter(coordToPlot(:, 1), coordToPlot(:, 2), [], c);
         end
     end
 hold off
%removal cell labels   
 else
     hold on;
     Cytosolic_Callback(hObject, eventdata, handles);
     Nuclear_Callback(hObject, eventdata, handles);
     hold off; 
 end

% Hint: get(hObject,'Value') returns toggle state of CellLabelling

% --- Executes on button press in checkbox2.
function checkbox2_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox2



%otherwise the user had a .mat file of the form 'cells' without 'colonies'


% --- Executes on button press in selectColoniesButton.
%Creates StructDlg for selection of specific colonies to plot
function selectColoniesButton_Callback(hObject, eventdata, handles)
% hObject    handle to selectColoniesButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%set visability of all colonies to false
colonies = length(handles.coloniesToPlot);
userSelectedColonies.SelectedColonies(colonies) = 0;

%TODO: throw exception if user tries to not put in units/etc.
userSelectedColonies = StructDlg(userSelectedColonies, 'Select Colonies');
handles.coloniesToPlot = userSelectedColonies.SelectedColonies;
guidata(hObject,handles);
updatePlot(hObject, handles);

function updatePlot(hObject, handles)
colonyColors = helpPlot(hObject, handles);




% --- Executes on button press in checkbox6.
function checkbox6_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox6


% --- Executes on button press in checkbox7.
function checkbox7_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox7


% --- Executes during object creation, after setting all properties.
function GraphAxes_CreateFcn(hObject, eventdata, handles)
% hObject    handle to GraphAxes (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called
% Hint: place code in OpeningFcn to populate GraphAxes


% --- Executes on mouse press over axes background.
function GraphAxes_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to GraphAxes (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
